

//    Poser action playback
//      This program was generated by Project Biped Poser to playback a specific action.
//    Use it as the starting point for your projects!
//
//    Copyright (C) 2012  Jonathan Dowdall, Project Biped (www.projectbiped.com)
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program.  If not, see <http://www.gnu.org/licenses/>.

#include <Servo.h> 

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Constants
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const int maximumServoShieldPosition = 2200;   // the maximum pulse duration for the servo shield (2ms pulse)
const int minimumServoShieldPosition = 800;   // the minimum pulse duration for the servo shield (1ms pulse)
const int numberOfServos             = 12;      // the number of servos
const int numberOfJoints             = 12;
const int numberOfFrames             = 121;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Action
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //  The Action class collects information necessary to perform a sequence of movements.     
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  
  
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //Members
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  public:
    int             duration;      // Total duration of the action in milliseconds
    float           playbackTime;  // The playback time in milliseconds.
    unsigned long   lastTime;      // The playback time in milliseconds.
    int*            frames;        // Pointer to a two dimensional array containing the individual frames
    float           playbackSpeed; // The speed at which the action is played back (1 is realtime, 0.5 is half speed, 2.0 is twice realtime)

  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //Methods
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  Action(int setDuration, void* setFrames)
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  {
    frames            = (int*)setFrames;
    duration          = setDuration;
    playbackTime      = 0;
    playbackSpeed     = 1.0;
    lastTime          = 0;
  }  
  
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  void Update()
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  {  
     // Get the current time.
     unsigned long currentTime = millis(); 
   
     // Update the playback time.
     playbackTime += (playbackSpeed * (float)(currentTime - lastTime));
     
     // Loop if the playback time is past the end of the action.
     if(playbackTime > duration)
       playbackTime = playbackTime - duration;
     
     // Remember the time.
     lastTime = currentTime;     
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  void GetCurrentFrame(int* frame)
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  {
      //update each servo
      int* sourceFrame = frames + ((int)playbackTime/20)*numberOfJoints;
      for (int joint = 0; joint < numberOfJoints; joint++)
        frame[joint] = sourceFrame[joint];    
  }

};
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Action Frames
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Joints positions are in degrees * 100 (home position is 0 degrees)
/////////////////////////////////////////////
//JOINT INDEXES
//
//RIGHT LEG JOINTS
// 0 Right Ankle (roll)
// 1 Right Lower Leg 
// 2 Right Knee 
// 3 Right Middle Leg 
// 4 Right Upper Leg 
// 5 Right Hip (roll)
//LEFT LEG JOINTS
// 6 Left Ankle (roll)
// 7 Left Lower Leg 
// 8 Left Knee 
// 9 Left Middle Leg 
// 10 Left Upper Leg 
// 11 Left Hip (roll)
/////////////////////////////////////////////
int servoPins[numberOfServos] = {22, 24, 26, 28, 30, 32, 38, 40, 42, 44, 46, 48};  // the pin for each servo 
int frames[numberOfFrames][numberOfJoints] = {
                      {  707, -2393,     0,     0, -3100,  2300, -1300,     0,   800,     0,     0, -2300 },
                      {  935, -2346,     0,     0, -3100,  2315, -1315,  -107,   754,     0,     0, -2300 },
                      { 1162, -2300,     0,     0, -3100,  2330, -1330,  -214,   708,     0,     0, -2300 },
                      { 1389, -2253,     0,     0, -3100,  2345, -1345,  -321,   662,     0,     0, -2300 },
                      { 1617, -2207,     0,     0, -3100,  2361, -1361,  -429,   616,     0,     0, -2300 },
                      { 1844, -2160,     0,     0, -3100,  2376, -1376,  -536,   570,     0,     0, -2300 },
                      { 2071, -2114,     0,     0, -3100,  2391, -1391,  -643,   524,     0,     0, -2300 },
                      { 2280, -1983,     0,     0, -3100,  2333, -1436,  -714,   522,     0,     0, -2300 },
                      { 2459, -1769,     0,     0, -3100,  2201, -1510,  -744,   566,     0,     0, -2300 },
                      { 2638, -1556,     0,     0, -3100,  2068, -1584,  -773,   610,     0,     0, -2300 },
                      { 2817, -1342,     0,     0, -3100,  1936, -1657,  -803,   654,     0,     0, -2300 },
                      { 2996, -1129,     0,     0, -3100,  1803, -1731,  -832,   698,     0,     0, -2300 },
                      { 3175,  -915,     0,     0, -3100,  1670, -1805,  -862,   743,     0,     0, -2300 },
                      { 3354,  -702,     0,     0, -3100,  1538, -1878,  -891,   787,     0,     0, -2300 },
                      { 3283, -1064,  -461,   390, -2534,  1563, -2019,  -820,   935,   159,    79, -2236 },
                      { 3106, -1670, -1121,   947, -1727,  1654, -2189,  -706,  1128,   386,   193, -2145 },
                      { 2930, -2275, -1780,  1504,  -920,  1745, -2360,  -592,  1321,   614,   307, -2054 },
                      { 2754, -2881, -2440,  2061,  -112,  1836, -2531,  -479,  1515,   841,   420, -1963 },
                      { 2578, -3486, -3099,  2618,   694,  1927, -2701,  -365,  1708,  1068,   534, -1872 },
                      { 2402, -4092, -3759,  3176,  1502,  2018, -2872,  -251,  1901,  1296,   648, -1781 },
                      { 2225, -4698, -4418,  3733,  2309,  2109, -3042,  -138,  2095,  1523,   761, -1690 },
                      { 2049, -5303, -5078,  4290,  3116,  2200, -3213,   -24,  2288,  1751,   875, -1599 },
                      { 1873, -5909, -5738,  4847,  3924,  2291, -3383,    89,  2481,  1978,   989, -1508 },
                      { 1914, -5477, -5359,  4729,  4117,  2336, -3400,   181,  2482,  2090,   991, -1608 },
                      { 1978, -4935, -4869,  4539,  4247,  2376, -3400,   271,  2462,  2190,   981, -1728 },
                      { 2041, -4392, -4378,  4348,  4377,  2416, -3400,   361,  2442,  2290,   970, -1848 },
                      { 2105, -3849, -3889,  4159,  4507,  2456, -3400,   450,  2422,  2390,   961, -1968 },
                      { 2169, -3307, -3399,  3969,  4637,  2496, -3400,   540,  2402,  2490,   951, -2088 },
                      { 2233, -2764, -2909,  3779,  4767,  2536, -3400,   630,  2382,  2590,   941, -2208 },
                      { 2296, -2221, -2419,  3589,  4897,  2576, -3400,   720,  2362,  2690,   931, -2328 },
                      { 2360, -1678, -1929,  3399,  5027,  2616, -3400,   811,  2342,  2790,   921, -2447 },
                      { 2424, -1136, -1439,  3209,  5157,  2656, -3400,   901,  2322,  2890,   911, -2568 },
                      { 2488,  -593,  -949,  3019,  5287,  2696, -3400,   991,  2302,  2990,   901, -2688 },
                      { 2345,  -427, -1098,  2730,  5336,  2646, -3310,   793,  2138,  2730,   720, -2763 },
                      { 2180,  -302, -1318,  2430,  5376,  2586, -3210,   563,  1957,  2430,   520, -2833 },
                      { 2015,  -177, -1538,  2130,  5416,  2526, -3110,   333,  1778,  2130,   320, -2903 },
                      { 1850,   -52, -1757,  1829,  5456,  2466, -3010,   102,  1598,  1829,   119, -2973 },
                      { 1685,    71, -1978,  1530,  5496,  2406, -2910,  -126,  1418,  1530,   -80, -3043 },
                      { 1519,   196, -2197,  1230,  5536,  2346, -2810,  -356,  1238,  1230,  -279, -3113 },
                      { 1354,   321, -2418,   930,  5576,  2286, -2710,  -586,  1058,   930,  -479, -3183 },
                      { 1189,   445, -2638,   629,  5616,  2226, -2610,  -817,   877,   629,  -680, -3253 },
                      { 1024,   570, -2858,   330,  5656,  2166, -2510, -1047,   698,   330,  -880, -3323 },
                      {  859,   695, -3078,    30,  5696,  2106, -2410, -1277,   518,    30, -1080, -3393 },
                      {  815,   598, -3055,    72,  5529,  2010, -2319, -1264,   581,     0, -1172, -3265 },
                      {  784,   477, -3005,   152,  5339,  1910, -2229, -1224,   671,     0, -1252, -3115 },
                      {  753,   355, -2955,   231,  5149,  1810, -2139, -1184,   761,     0, -1332, -2965 },
                      {  723,   234, -2905,   312,  4959,  1710, -2049, -1144,   851,     0, -1412, -2815 },
                      {  692,   113, -2855,   392,  4769,  1610, -1959, -1104,   941,     0, -1492, -2665 },
                      {  661,    -8, -2805,   472,  4579,  1510, -1869, -1064,  1030,     0, -1572, -2515 },
                      {  631,  -129, -2755,   552,  4389,  1410, -1779, -1024,  1121,     0, -1652, -2365 },
                      {  600,  -250, -2705,   632,  4198,  1310, -1689,  -984,  1211,     0, -1732, -2215 },
                      {  569,  -372, -2655,   712,  4009,  1210, -1599,  -944,  1301,     0, -1812, -2065 },
                      {  539,  -493, -2605,   792,  3819,  1110, -1509,  -903,  1391,     0, -1892, -1914 },
                      {  345,  -450, -2231,   713,  3388,   731, -1261, -1061,  1248,     0, -2029, -1542 },
                      {  132,  -390, -1823,   617,  2931,   323,  -997, -1241,  1080,     0, -2174, -1145 },
                      {  -79,  -329, -1414,   520,  2474,   -85,  -732, -1420,   911,     0, -2318,  -748 },
                      { -292,  -268, -1005,   424,  2017,  -494,  -468, -1600,   743,     0, -2462,  -352 },
                      { -504,  -207,  -596,   328,  1560,  -903,  -203, -1780,   574,     0, -2607,    44 },
                      { -717,  -146,  -187,   232,  1103, -1312,    61, -1959,   406,     0, -2751,   441 },
                      { -929,   -86,   221,   136,   646, -1721,   325, -2139,   238,     0, -2895,   838 },
                      {-1142,   -25,   630,    39,   189, -2130,   590, -2318,    69,     0, -3040,  1235 },
                      {-1289,     0,   800,     0,     0, -2300,   828, -2357,     0,     0, -3100,  1501 },
                      {-1387,     0,   800,     0,     0, -2300,  1043, -2296,     0,     0, -3100,  1669 },
                      {-1485,     0,   800,     0,     0, -2300,  1257, -2236,     0,     0, -3100,  1838 },
                      {-1584,     0,   800,     0,     0, -2300,  1472, -2176,     0,     0, -3100,  2006 },
                      {-1682,     0,   800,     0,     0, -2300,  1687, -2116,     0,     0, -3100,  2175 },
                      {-1780,     0,   800,     0,     0, -2300,  1901, -2055,     0,     0, -3100,  2344 },
                      {-1894,     0,   800,     0,     0, -2300,  2119, -1979,     0,     0, -3100,  2508 },
                      {-2119,     0,   800,     0,     0, -2300,  2316, -1779,     0,     0, -3100,  2597 },
                      {-2344,     0,   800,     0,     0, -2300,  2513, -1579,     0,     0, -3100,  2685 },
                      {-2569,     0,   800,     0,     0, -2300,  2711, -1379,     0,     0, -3100,  2773 },
                      {-2794,     0,   800,     0,     0, -2300,  2908, -1179,     0,     0, -3100,  2862 },
                      {-3019,     0,   800,     0,     0, -2300,  3105,  -978,     0,     0, -3100,  2950 },
                      {-3244,     0,   800,     0,     0, -2300,  3302,  -778,     0,     0, -3100,  3039 },
                      {-3393,    47,   953,   146,    64, -2269,  3365,  -819,  -197,   153, -2953,  3052 },
                      {-3370,   206,  1465,   635,   280, -2166,  3122, -1417,  -857,   665, -2464,  2893 },
                      {-3347,   366,  1976,  1124,   496, -2064,  2878, -2016, -1516,  1176, -1975,  2733 },
                      {-3324,   525,  2488,  1613,   712, -1962,  2635, -2614, -2176,  1688, -1486,  2574 },
                      {-3302,   684,  3000,  2102,   929, -1859,  2392, -3212, -2836,  2200,  -997,  2415 },
                      {-3279,   843,  3512,  2591,  1145, -1757,  2149, -3810, -3495,  2712,  -508,  2256 },
                      {-3256,  1002,  4023,  3080,  1361, -1655,  1906, -4408, -4155,  3223,   -19,  2097 },
                      {-3233,  1162,  4535,  3569,  1577, -1552,  1663, -5006, -4814,  3735,   469,  1937 },
                      {-3211,  1321,  5047,  4058,  1793, -1450,  1420, -5604, -5474,  4247,   958,  1778 },
                      {-3210,  1380,  5150,  4235,  1850, -1465,  1355, -5630, -5555,  4425,  1405,  1785 },
                      {-3229,  1340,  4850,  4105,  1750, -1595,  1465, -5090, -5065,  4275,  1814,  1955 },
                      {-3250,  1300,  4550,  3975,  1650, -1725,  1575, -4550, -4575,  4125,  2225,  2125 },
                      {-3270,  1260,  4250,  3845,  1550, -1855,  1685, -4010, -4085,  3975,  2635,  2295 },
                      {-3290,  1220,  3950,  3715,  1450, -1985,  1795, -3470, -3595,  3825,  3045,  2465 },
                      {-3310,  1180,  3650,  3585,  1350, -2115,  1905, -2929, -3104,  3675,  3454,  2635 },
                      {-3329,  1140,  3350,  3454,  1250, -2245,  2014, -2390, -2615,  3525,  3865,  2805 },
                      {-3350,  1100,  3050,  3325,  1150, -2375,  2125, -1850, -2125,  3375,  4275,  2975 },
                      {-3370,  1060,  2750,  3195,  1050, -2504,  2235, -1310, -1635,  3225,  4685,  3145 },
                      {-3390,  1019,  2450,  3065,   950, -2635,  2345,  -770, -1145,  3075,  5095,  3315 },
                      {-3350,   884,  2210,  2850,   799, -2735,  2320,  -439, -1010,  2850,  5320,  3365 },
                      {-3250,   654,  2029,  2549,   599, -2805,  2160,  -319, -1230,  2549,  5360,  3294 },
                      {-3149,   424,  1849,  2249,   399, -2875,  1999,  -199, -1450,  2249,  5400,  3225 },
                      {-3049,   194,  1669,  1949,   199, -2945,  1839,   -79, -1670,  1949,  5440,  3154 },
                      {-2949,   -35,  1489,  1649,     0, -3015,  1679,    40, -1890,  1649,  5480,  3085 },
                      {-2849,  -265,  1309,  1349,  -200, -3085,  1519,   160, -2110,  1349,  5520,  3014 },
                      {-2749,  -495,  1129,  1049,  -400, -3155,  1359,   280, -2330,  1049,  5560,  2944 },
                      {-2649,  -725,   949,   749,  -600, -3225,  1199,   400, -2550,   749,  5600,  2874 },
                      {-2549,  -955,   769,   449,  -800, -3295,  1039,   520, -2770,   449,  5640,  2804 },
                      {-2449, -1185,   589,   149, -1000, -3365,   879,   640, -2990,   149,  5680,  2734 },
                      {-2340, -1280,   545,     0, -1140, -3325,   758,   639, -3075,    40,  5605,  2575 },
                      {-2220, -1240,   635,     0, -1220, -3175,   674,   519, -3025,   120,  5415,  2325 },
                      {-2100, -1200,   725,     0, -1300, -3025,   591,   398, -2975,   200,  5225,  2075 },
                      {-1980, -1160,   815,     0, -1380, -2875,   508,   278, -2925,   280,  5035,  1825 },
                      {-1860, -1120,   905,     0, -1460, -2725,   424,   157, -2875,   360,  4845,  1575 },
                      {-1739, -1080,   994,     0, -1540, -2575,   341,    36, -2825,   440,  4655,  1324 },
                      {-1620, -1040,  1085,     0, -1620, -2425,   258,   -83, -2775,   520,  4465,  1075 },
                      {-1500, -1000,  1175,     0, -1700, -2275,   174,  -204, -2725,   600,  4275,   825 },
                      {-1380,  -960,  1264,     0, -1780, -2125,    91,  -324, -2675,   680,  4085,   575 },
                      {-1260,  -919,  1355,     0, -1860, -1975,     7,  -445, -2625,   760,  3895,   325 },
                      {-1085,  -989,  1315,     0, -1972, -1647,  -109,  -475, -2395,   751,  3571,    49 },
                      { -855, -1169,  1147,     0, -2116, -1142,  -262,  -414, -1986,   655,  3114,  -251 },
                      { -626, -1348,   979,     0, -2260,  -637,  -414,  -353, -1577,   559,  2657,  -551 },
                      { -396, -1528,   810,     0, -2405,  -131,  -566,  -292, -1168,   463,  2200,  -852 },
                      { -167, -1708,   642,     0, -2549,   373,  -719,  -231,  -759,   367,  1743, -1153 },
                      {   62, -1887,   473,     0, -2693,   878,  -871,  -171,  -350,   270,  1286, -1453 },
                      {  291, -2067,   305,     0, -2838,  1383, -1023,  -110,    58,   174,   829, -1754 },
                      {  520, -2246,   137,     0, -2982,  1888, -1175,   -49,   466,    78,   372, -2055 }
};


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Actions
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Action myAction(numberOfFrames * 20 , frames); //the action
Action* currentAction;                //pointer to the current action

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Variables
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Servo servos[numberOfServos];  // create servo object to control a servo 

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void setup()
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
  //set the initial action
  currentAction = &myAction;
  
  //wait for a second to begin (keeps the communication line open in case a new program is being downloaded)
  delay(1000);    
  
  //start up the communication
  Serial.begin(9600);  
  
  //initialize the servos
  initializeServos();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void loop()
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
  //this is the main update loop for the microcontroller
  
  //update the current action
  UpdateAction();
  
  //get the frame from the current action  
  int frame[numberOfServos];
  currentAction->GetCurrentFrame(frame);
  
  //set the servo positions for this frame number
  SetServoPositions(frame);        
  
  // Add a little delay.
  delay(2);                  
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void UpdateAction()
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
  //check to see if the robot is walking
  if(currentAction == &myAction)
  {
    // TODO (you) : add some logic for your action here!
    
    // move to the next frame of the action
    currentAction->Update();    
  }  
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void initializeServos()
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{   
  // Assign the correct pin to each servo.
  for(int s = 0; s < numberOfServos; s++)
    servos[s].attach(servoPins[s]);  
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void SetServoPositions(int* frame)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
  //update each servo
  for (int servo = 0; servo < numberOfServos; servo++)
  {   
      // each servo position is sent as a 2 byte value (high byte, low byte) integer (from -32,768 to 32,767)
      // this number is encoding the angle of the servo. The number is 100 * the servo angle.  This allows for the
      // storage of 2 significant digits(i.e. the value can be from -60.00 to 60.00 and every value in between).
      // Also remember that the servos have a range of 120 degrees. The angle is written in positions
      // which range from a minimum of 800 (-60 degrees) and go to a maximum of 2200 (60 degrees)
          
      int value = frame[servo];      
      
      // flip for the left leg.
      if(servo >= numberOfServos/2)
        value = map(value, -6000,6000,6000,-6000);
      
      servos[servo].write(map(value, -6000,6000,800,2200));              // tell servo to go to position in variable 'pos'       

  }
}
