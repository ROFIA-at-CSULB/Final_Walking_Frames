

//    Poser action playback
//      This program was generated by Project Biped Poser to playback a specific action.
//    Use it as the starting point for your projects!
//
//    Copyright (C) 2012  Jonathan Dowdall, Project Biped (www.projectbiped.com)
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program.  If not, see <http://www.gnu.org/licenses/>.

#include <Servo.h> 

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Constants
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const int maximumServoShieldPosition = 2200;   // the maximum pulse duration for the servo shield (2ms pulse)
const int minimumServoShieldPosition = 800;   // the minimum pulse duration for the servo shield (1ms pulse)
const int numberOfServos             = 12;      // the number of servos
const int numberOfJoints             = 12;
const int numberOfFrames             = 117;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Action
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //  The Action class collects information necessary to perform a sequence of movements.     
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  
  
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //Members
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  public:
    int             duration;      // Total duration of the action in milliseconds
    float           playbackTime;  // The playback time in milliseconds.
    unsigned long   lastTime;      // The playback time in milliseconds.
    int*            frames;        // Pointer to a two dimensional array containing the individual frames
    float           playbackSpeed; // The speed at which the action is played back (1 is realtime, 0.5 is half speed, 2.0 is twice realtime)

  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //Methods
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  Action(int setDuration, void* setFrames)
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  {
    frames            = (int*)setFrames;
    duration          = setDuration;
    playbackTime      = 0;
    playbackSpeed     = 1.0;
    lastTime          = 0;
  }  
  
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  void Update()
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  {  
     // Get the current time.
     unsigned long currentTime = millis(); 
   
     // Update the playback time.
     playbackTime += (playbackSpeed * (float)(currentTime - lastTime));
     
     // Loop if the playback time is past the end of the action.
     if(playbackTime > duration)
       playbackTime = playbackTime - duration;
     
     // Remember the time.
     lastTime = currentTime;     
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  void GetCurrentFrame(int* frame)
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  {
      //update each servo
      int* sourceFrame = frames + ((int)playbackTime/20)*numberOfJoints;
      for (int joint = 0; joint < numberOfJoints; joint++)
        frame[joint] = sourceFrame[joint];    
  }

};
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Action Frames
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Joints positions are in degrees * 100 (home position is 0 degrees)
/////////////////////////////////////////////
//JOINT INDEXES
//
//RIGHT LEG JOINTS
// 0 Right Ankle (roll)
// 1 Right Lower Leg 
// 2 Right Knee 
// 3 Right Middle Leg 
// 4 Right Upper Leg 
// 5 Right Hip (roll)
//LEFT LEG JOINTS
// 6 Left Ankle (roll)
// 7 Left Lower Leg 
// 8 Left Knee 
// 9 Left Middle Leg 
// 10 Left Upper Leg 
// 11 Left Hip (roll)
/////////////////////////////////////////////
int servoPins[numberOfServos] = {22, 24, 26, 28, 30, 32, 38, 40, 42, 44, 46, 48};  // the pin for each servo 
int frames[numberOfFrames][numberOfJoints] = {
                      {  707, -2393,     0,     0, -3100,  2300, -1300,     0,   800,     0,     0, -2300 },
                      {  935, -2346,     0,     0, -2977,  2192, -1376,  -107,   891,  -122,     0, -2300 },
                      { 1162, -2300,     0,     0, -2854,  2085, -1453,  -214,   983,  -245,     0, -2300 },
                      { 1389, -2253,     0,     0, -2732,  1978, -1529,  -321,  1075,  -367,     0, -2300 },
                      { 1617, -2207,     0,     0, -2609,  1870, -1606,  -429,  1167,  -490,     0, -2300 },
                      { 1844, -2160,     0,     0, -2486,  1763, -1683,  -536,  1259,  -613,     0, -2300 },
                      { 2071, -2114,     0,     0, -2364,  1656, -1759,  -643,  1351,  -735,     0, -2300 },
                      { 2257, -2010,     0,    49, -2321,  1610, -1925,  -710,  1389,  -685,     0, -2256 },
                      { 2390, -1852,     0,   147, -2365,  1632, -2176,  -732,  1367,  -455,     0, -2168 },
                      { 2523, -1693,     0,   245, -2409,  1654, -2428,  -754,  1345,  -226,     0, -2081 },
                      { 2655, -1535,     0,   344, -2452,  1676, -2679,  -776,  1323,     3,     0, -1994 },
                      { 2788, -1377,     0,   442, -2496,  1698, -2930,  -798,  1301,   232,     0, -1906 },
                      { 2921, -1218,     0,   540, -2540,  1720, -3182,  -820,  1279,   462,     0, -1819 },
                      { 3054, -1060,     0,   639, -2584,  1742, -3433,  -842,  1257,   691,     0, -1731 },
                      { 3187,  -902,     0,   737, -2627,  1763, -3684,  -863,  1236,   920,     0, -1644 },
                      { 3319,  -743,     0,   835, -2671,  1785, -3936,  -885,  1214,  1150,     0, -1556 },
                      { 3344,  -852,  -230,  1059, -2504,  1819, -4080,  -860,  1259,  1307,    39, -1519 },
                      { 3168, -1458,  -890,  1514, -1947,  1876, -4023,  -746,  1430,  1330,   153, -1576 },
                      { 2992, -2063, -1549,  1968, -1390,  1933, -3966,  -632,  1600,  1353,   267, -1633 },
                      { 2816, -2669, -2209,  2423,  -833,  1990, -3909,  -519,  1771,  1376,   380, -1690 },
                      { 2640, -3274, -2869,  2878,  -276,  2047, -3852,  -405,  1941,  1398,   494, -1747 },
                      { 2463, -3880, -3528,  3333,   281,  2104, -3795,  -291,  2112,  1421,   608, -1804 },
                      { 2287, -4486, -4188,  3788,   838,  2161, -3738,  -177,  2283,  1444,   722, -1861 },
                      { 2111, -5091, -4847,  4243,  1395,  2217, -3682,   -64,  2453,  1467,   835, -1917 },
                      { 1935, -5697, -5507,  4698,  1952,  2274, -3625,    49,  2624,  1489,   949, -1974 },
                      { 1964, -5053, -4976,  4580,  2721,  2367, -3566,   251,  2632,  1752,   983, -2016 },
                      { 2158, -3394, -3478,  3999,  3668,  2489, -3505,   526,  2510,  2210,   952, -2047 },
                      { 2353, -1735, -1980,  3418,  4616,  2611, -3444,   801,  2388,  2669,   922, -2077 },
                      { 2444,  -501,  -966,  2910,  5312,  2682, -3370,   931,  2246,  2910,   840, -2139 },
                      { 2279,  -377, -1186,  2610,  5352,  2622, -3270,   701,  2066,  2610,   640, -2269 },
                      { 2114,  -252, -1406,  2310,  5392,  2562, -3170,   471,  1886,  2310,   439, -2399 },
                      { 1949,  -127, -1626,  2010,  5432,  2502, -3070,   240,  1705,  2010,   239, -2529 },
                      { 1784,    -3, -1846,  1710,  5472,  2442, -2970,    10,  1526,  1710,    40, -2659 },
                      { 1618,   121, -2066,  1410,  5512,  2382, -2870,  -219,  1346,  1410,  -160, -2789 },
                      { 1453,   246, -2286,  1110,  5552,  2322, -2770,  -449,  1166,  1110,  -359, -2919 },
                      { 1288,   371, -2506,   810,  5592,  2262, -2670,  -678,   986,   810,  -560, -3049 },
                      { 1123,   495, -2726,   510,  5632,  2202, -2570,  -909,   806,   510,  -759, -3179 },
                      {  958,   620, -2946,   209,  5672,  2142, -2470, -1139,   625,   209,  -960, -3309 },
                      {  833,   671, -3085,    24,  5643,  2070, -2373, -1288,   527,     0, -1124, -3354 },
                      {  802,   550, -3035,   104,  5453,  1970, -2283, -1248,   617,     0, -1204, -3204 },
                      {  772,   428, -2985,   184,  5263,  1870, -2193, -1208,   707,     0, -1284, -3055 },
                      {  741,   307, -2935,   264,  5073,  1770, -2103, -1168,   797,     0, -1364, -2905 },
                      {  710,   186, -2885,   344,  4883,  1670, -2013, -1128,   887,     0, -1444, -2755 },
                      {  680,    64, -2835,   424,  4693,  1570, -1923, -1088,   977,     0, -1524, -2605 },
                      {  649,   -56, -2785,   504,  4503,  1470, -1832, -1048,  1067,     0, -1604, -2455 },
                      {  618,  -177, -2735,   584,  4313,  1370, -1743, -1008,  1157,     0, -1684, -2305 },
                      {  588,  -299, -2685,   664,  4123,  1270, -1653,  -968,  1247,     0, -1764, -2155 },
                      {  557,  -420, -2635,   744,  3933,  1170, -1563,  -927,  1337,     0, -1844, -2004 },
                      {  472,  -487, -2477,   771,  3662,   977, -1420,  -953,  1349,     0, -1943, -1755 },
                      {  260,  -426, -2068,   674,  3205,   568, -1156, -1133,  1181,     0, -2087, -1274 },
                      {   47,  -365, -1659,   578,  2748,   159,  -891, -1313,  1012,     0, -2231,  -793 },
                      { -164,  -304, -1250,   482,  2291,  -249,  -626, -1492,   844,     0, -2376,  -312 },
                      { -377,  -244,  -841,   386,  1834,  -658,  -362, -1672,   675,     0, -2520,   168 },
                      { -589,  -183,  -432,   290,  1377, -1067,   -97, -1851,   507,     0, -2664,   649 },
                      { -802,  -122,   -23,   193,   920, -1476,   166, -2031,   339,     0, -2809,  1130 },
                      {-1014,   -61,   385,    97,   463, -1885,   431, -2211,   170,     0, -2953,  1611 },
                      {-1227,     0,   794,     1,     6, -2294,   696, -2390,     2,     0, -3097,  2093 },
                      {-1323,     0,   800,     0,     0, -2300,   903, -2336,     0,     0, -3100,  2158 },
                      {-1421,     0,   800,     0,     0, -2300,  1118, -2275,     0,     0, -3100,  2219 },
                      {-1520,     0,   800,     0,     0, -2300,  1332, -2215,     0,     0, -3100,  2280 },
                      {-1618,     0,   800,     0,     0, -2300,  1547, -2155,     0,     0, -3100,  2342 },
                      {-1716,     0,   800,     0,     0, -2300,  1762, -2094,     0,     0, -3100,  2403 },
                      {-1815,     0,   800,     0,     0, -2300,  1976, -2034,     0,     0, -3100,  2464 },
                      {-1973,     0,   800,     0,     0, -2300,  2188, -1909,     0,     0, -3100,  2539 },
                      {-2198,     0,   800,     0,     0, -2300,  2385, -1709,     0,     0, -3100,  2628 },
                      {-2423,     0,   800,     0,     0, -2300,  2582, -1509,     0,     0, -3100,  2716 },
                      {-2648,     0,   800,     0,     0, -2300,  2779, -1309,     0,     0, -3100,  2804 },
                      {-2873,     0,   800,     0,     0, -2300,  2977, -1108,     0,     0, -3100,  2893 },
                      {-3098,     0,   800,     0,     0, -2300,  3174,  -908,     0,     0, -3100,  2981 },
                      {-3323,     0,   800,     0,     0, -2300,  3371,  -708,     0,     0, -3100,  3069 },
                      {-3385,   103,  1132,   317,   140, -2233,  3280, -1029,  -428,   332, -2782,  2981 },
                      {-3362,   262,  1644,   806,   356, -2131,  3037, -1627, -1088,   844, -2293,  2799 },
                      {-3339,   421,  2156,  1295,   572, -2028,  2793, -2225, -1747,  1356, -1804,  2617 },
                      {-3316,   581,  2667,  1784,   788, -1926,  2550, -2823, -2407,  1867, -1315,  2435 },
                      {-3294,   740,  3179,  2273,  1004, -1824,  2307, -3421, -3066,  2379,  -826,  2253 },
                      {-3271,   899,  3691,  2762,  1220, -1721,  2064, -4019, -3726,  2891,  -337,  2072 },
                      {-3248,  1058,  4202,  3251,  1436, -1619,  1821, -4617, -4386,  3402,   151,  1890 },
                      {-3226,  1217,  4714,  3740,  1652, -1517,  1578, -5215, -5045,  3914,   640,  1708 },
                      {-3203,  1377,  5226,  4229,  1868, -1414,  1334, -5813, -5705,  4426,  1129,  1526 },
                      {-3217,  1366,  5045,  4189,  1814, -1510,  1393, -5441, -5383,  4372,  1548,  1661 },
                      {-3236,  1326,  4745,  4059,  1714, -1640,  1503, -4901, -4893,  4222,  1958,  1851 },
                      {-3257,  1286,  4445,  3929,  1614, -1770,  1613, -4361, -4403,  4072,  2368,  2041 },
                      {-3277,  1246,  4145,  3799,  1515, -1900,  1723, -3821, -3913,  3922,  2778,  2231 },
                      {-3297,  1206,  3845,  3669,  1415, -2030,  1833, -3281, -3423,  3772,  3188,  2421 },
                      {-3317,  1166,  3545,  3539,  1315, -2160,  1943, -2741, -2933,  3622,  3598,  2611 },
                      {-3336,  1126,  3245,  3409,  1214, -2290,  2053, -2201, -2443,  3472,  4008,  2801 },
                      {-3357,  1086,  2945,  3279,  1114, -2420,  2163, -1661, -1953,  3322,  4418,  2991 },
                      {-3377,  1046,  2645,  3149,  1015, -2550,  2273, -1121, -1463,  3172,  4828,  3181 },
                      {-3397,  1006,  2345,  3019,   915, -2680,  2383,  -581,  -973,  3022,  5238,  3371 },
                      {-3315,   804,  2147,  2745,   730, -2759,  2264,  -398, -1087,  2745,  5334,  3340 },
                      {-3215,   574,  1967,  2445,   530, -2829,  2104,  -278, -1307,  2445,  5374,  3270 },
                      {-3115,   344,  1787,  2145,   330, -2899,  1944,  -158, -1527,  2145,  5414,  3200 },
                      {-3015,   114,  1607,  1845,   129, -2969,  1784,   -37, -1747,  1845,  5454,  3130 },
                      {-2915,  -115,  1427,  1545,   -69, -3039,  1624,    82, -1967,  1545,  5494,  3060 },
                      {-2815,  -345,  1247,  1245,  -269, -3109,  1464,   201, -2186,  1245,  5534,  2990 },
                      {-2715,  -575,  1066,   944,  -470, -3179,  1304,   322, -2407,   944,  5574,  2920 },
                      {-2615,  -805,   886,   644,  -670, -3249,  1144,   442, -2627,   644,  5614,  2850 },
                      {-2515, -1035,   707,   344,  -869, -3319,   984,   562, -2847,   344,  5654,  2780 },
                      {-2415, -1265,   527,    44, -1070, -3389,   824,   682, -3067,    44,  5694,  2710 },
                      {-2297, -1266,   576,     0, -1168, -3272,   729,   597, -3057,    68,  5538,  2487 },
                      {-2177, -1226,   666,     0, -1248, -3122,   645,   476, -3007,   148,  5348,  2237 },
                      {-2058, -1186,   756,     0, -1328, -2972,   562,   356, -2957,   228,  5158,  1987 },
                      {-1937, -1145,   846,     0, -1408, -2822,   479,   235, -2907,   308,  4968,  1737 },
                      {-1818, -1106,   936,     0, -1487, -2672,   395,   115, -2857,   387,  4778,  1487 },
                      {-1698, -1066,  1026,     0, -1567, -2522,   312,    -5, -2807,   467,  4588,  1237 },
                      {-1578, -1026,  1116,     0, -1647, -2372,   228,  -125, -2757,   547,  4398,   987 },
                      {-1458,  -986,  1206,     0, -1727, -2222,   145,  -246, -2707,   627,  4208,   737 },
                      {-1338,  -946,  1296,     0, -1807, -2072,    62,  -366, -2657,   707,  4018,   487 },
                      {-1218,  -906,  1386,     0, -1888, -1922,   -21,  -487, -2607,   788,  3828,   237 },
                      {-1004, -1052,  1256,     0, -2022, -1470,  -163,  -453, -2252,   718,  3411,   -55 },
                      { -775, -1232,  1088,     0, -2167,  -965,  -315,  -393, -1843,   621,  2954,  -356 },
                      { -546, -1411,   920,     0, -2311,  -460,  -467,  -332, -1434,   525,  2497,  -656 },
                      { -316, -1591,   751,     0, -2455,    44,  -620,  -271, -1025,   429,  2040,  -957 },
                      {  -87, -1771,   583,     0, -2599,   549,  -772,  -210,  -616,   333,  1583, -1258 },
                      {  142, -1950,   414,     0, -2744,  1055,  -924,  -149,  -207,   237,  1126, -1558 },
                      {  371, -2130,   246,     0, -2888,  1560, -1076,   -89,   201,   140,   669, -1859 },
                      {  601, -2309,    78,     0, -3032,  2065, -1229,   -28,   610,    44,   212, -2160 }
};

int servoCalibrations[numberOfJoints][3] = {
                      {2279, 2063, 1500}, 
                      {858, 238, 439}, 
                      {-500, -1100, -1400}, 
                      {0, 0, -100}, 
                      {-600, -700, -800}, 
                      {-1000, -1200, -1500}, 
                      {2200, 1700, 1500}, 
                      {-300, 0, -570}, 
                      {500, 200, -218}, 
                      {200, 300, 244}, 
                      {1100, 1000, 253}, 
                      {1200, 700, 200}
};

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Actions
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Action myAction(numberOfFrames * 20 , frames); //the action
Action* currentAction;                //pointer to the current action

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Variables
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Servo servos[numberOfServos];  // create servo object to control a servo 

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void setup()
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
  //set the initial action
  currentAction = &myAction;
  
  //wait for a second to begin (keeps the communication line open in case a new program is being downloaded)
  delay(1000);    
  
  //start up the communication
  Serial.begin(9600);  
  
  //initialize the servos
  initializeServos();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void loop()
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
  //this is the main update loop for the microcontroller
  
  //update the current action
  UpdateAction();
  
  //get the frame from the current action  
  int frame[numberOfServos];
  currentAction->GetCurrentFrame(frame);
  
  //set the servo positions for this frame number
  SetServoPositions(frame);        
  
  // Add a little delay.
  delay(2);                  
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void UpdateAction()
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
  //check to see if the robot is walking
  if(currentAction == &myAction)
  {
    // TODO (you) : add some logic for your action here!
    
    // move to the next frame of the action
    currentAction->Update();    
  }  
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void initializeServos()
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{   
  // Assign the correct pin to each servo.
  for(int s = 0; s < numberOfServos; s++)
    servos[s].attach(servoPins[s]);  
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void SetServoPositions(int* frame)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
  //update each servo
  for (int servo = 0; servo < numberOfServos; servo++)
  {   
      // each servo position is sent as a 2 byte value (high byte, low byte) integer (from -32,768 to 32,767)
      // this number is encoding the angle of the servo. The number is 100 * the servo angle.  This allows for the
      // storage of 2 significant digits(i.e. the value can be from -60.00 to 60.00 and every value in between).
      // Also remember that the servos have a range of 120 degrees. The angle is written in positions
      // which range from a minimum of 800 (-60 degrees) and go to a maximum of 2200 (60 degrees)
          
      int value = frame[servo];      
      
      // flip for the left leg.
      if(servo >= numberOfServos/2)
        value = map(value, -6000,6000,6000,-6000);
      
      servos[servo].write(map(value, -6000,6000,800,2200));              // tell servo to go to position in variable 'pos'       

  }
}
